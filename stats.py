""" 

This module is used for visualizing results generated by the ABM simulation runs. 

The standardized results, stored in the database, are visualized using matplotlib.pyplot, which is wrapped by this module. The module also makes use of pandas.

The module provides a set of pre-defined plotting functions. Data is forwarded to these in the form of input arguments. The functions then create the plots. 
Functionality is also provided for saving plots as pdf or png. Destination directory must be specified in the config-file. Alternatively, paths where plots are saved can be specified as input arguments. 

"""

__author__ = "Linnart Felkl"
__email__ = "linnartsf@gmail.com"

from cProfile import label
import data
import config
from matplotlib import pyplot as plt
import pandas

plt.style.use("fivethirtyeight")

def warning(msg: str) -> None:
    """ helper function that prints a warning into console; used when invalid input is forwarded to one of the functions in the module """
    print(f"WARING: {msg}")

def set_plotstyle(style: str) -> None:
    """ sets matplotlib plotstyle """
    plt.style.use(style)

def set_fontsizes(smallsize: float, mediumsize: float, largesize: float):
    plt.rc('font', size = smallsize)          # controls default text sizes
    plt.rc('axes', titlesize = smallsize)     # fontsize of the axes title
    plt.rc('axes', labelsize = mediumsize)    # fontsize of the x and y labels
    plt.rc('xtick', labelsize = smallsize)    # fontsize of the tick labels
    plt.rc('ytick', labelsize = smallsize)    # fontsize of the tick labels
    plt.rc('legend', fontsize = smallsize)    # legend fontsize
    plt.rc('figure', titlesize = largesize)   # fontsize of the figure title

def save_plot(filename: str, filepath: str = "") -> None:
    """ stores plot as png and pdf, for specified equipment name """
    if filepath == "": filepath = config.path_saveplots
    plt.savefig(filepath+"\\"+filename+".png")
    plt.savefig(filepath+"\\"+filename+".pdf")

def plot_agentattr_line(agent_id: int, 
                        attr: str,
                        df: pandas.DataFrame,
                        mintime: int = 0,
                        maxtime: int = 0) -> None:
    """ creates a line plot for for individual agent attribute value, for a single agent, throughout time (for one attribute) """
    
    # derive relevant plotting data
    df = df[df["id"] == agent_id]
    x = df["simtime"]
    y = df[attr]

    # create plot 
    plt.plot(x, 
             y,
             label = attr)
    
    # set axis limits, if relevant
    if maxtime > 0:
        plt.xlim(mintime, maxtime)

    # set titles
    plt.title(f"{attr} for agent {str(agent_id)} over time")
    plt.xlabel("simulation time")
    plt.ylabel(attr)

    # add legend
    plt.legend()

# TODO further specify this function to allow to sample a subset of agents randomly
def plot_agentattr_lines(attr: str,
                         df: pandas.DataFrame,
                         mintime: int = 0,
                         maxtime: int = 0) -> None:
    """ plots trajectories for all agents in dataset, but only for the specified attribute """
    
    # unique list of agents; for each agent one line will be added to the plot
    ids = df["id"].unique()

    # create a line plot for each agent
    for id in ids:
        subset = df[df["id"] == id]
        plt.plot(df["simtime"], 
                 df[attr],
                 label = str(id))
    
    # set axis limits, if relevant
    if maxtime > 0:
        plt.xlim(mintime, maxtime)
    
    # set titles
    plt.title(f"{attr} for agents throughput simulation time")
    plt.xlabel("simulation time")
    plt.ylabel(attr) 

    # add legend
    plt.legend()

def plot_avgattr_lines(attributes: list,
                       df: pandas.DataFrame,
                       mintime: int,
                       maxtime: int) -> None:
    """ plot avg value trajectory for all agents throughout time, for arbitrary amount of attributes """
    
    # calculate data to plot
    results = df.groupby("simtime").mean()

    # for each attribute create a plot
    for attr in attributes:
        plt.plot(results["simtime"], 
                 results[attr],
                 label = attr)
    
    # cut axis if relevant
    if maxtime > 0:
        plt.xlim(mintime, maxtime)
    
    # add titles
    plt.title("avg agent attribute value developments")
    plt.xlabel("simulation time")
    plt.ylabel("attribute values")

    # add legend
    plt.legend()

# plot, for every time interval, the distribution of agents that have one of the values of respective attribute (stacked bar diagram)
def plot_valistribution(attributes: list,
                            df: pandas.DataFrame,
                            mintime: int,
                            maxtime: int) -> None:
    """ function for plotting dynamic relative state distribution among the state listed in attributes argument """

    # calculate plotting data
    results = df.groupby("simtime").sum()[attributes]
    results["total"] = results.sum(axis = 1)

    # for each time index, create a stacked barplot
    y_old = None
    for attr in attributes:
        if y_old == None:
            plt.bar(results["simtime"], 
                     results[attr]/results["total"], 
                     label = attr)
            y_old = results[attr]/results["total"]
        else:
            plt.bar(results["simtime"], 
                     results[attr], 
                     bottom = y_old,
                     label = attr)
            y_old = y_old + results[attr]/results["total"]

    # cut axis if relevant
    if maxtime > 0:
        plt.xlim(mintime, maxtime)
    
    # add titles
    plt.title("dynamic relative state distribution of agents")
    plt.xlabel("simulation time")
    plt.ylabel("relative state distribution")

    # add legensd
    plt.legend()

# plot grid cell occupation (at least one agent in cell, or none), for "all" agent types or just for one or several agent types (i.e. "populations")
# TODO

# plot grid and intensity of agent population, for "all" agents or one or several agent types
# TODO

# TODO implement additional plot types and plotting options